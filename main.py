from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from telethon import sync, events, TelegramClient
from colorama import init, Fore, Style
from datetime import datetime
import urllib.request
import subprocess, sys
import time
import sqlite3
import re
import requests
import pytz
import os
import asyncio
from conf import *
from registration import *

init()


async def client_authorization(_account_number):
    _account_number -= 1
    print(f"–û—á–µ—Ä–µ–¥—å –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Ññ {Accounts[_account_number][0]}")
    phone = Accounts[_account_number][1]
    session = str(".anon" + str(_account_number+1))
    # client = TelegramClient(session, api_id, api_hash, proxy=("http", proxy[1][0], proxy[1][1]))
    # print(f"{_account_number+1}: "+ "–ü—Ä–æ–∫—Å–∏: " + Fore.RED +"128.199.254.103:" + str(23352) + Fore.GREEN)
    # client = TelegramClient(session, api_id, api_hash, proxy=("http", "128.199.254.103", 23352))
    client = TelegramClient(session, api_id, api_hash)
    print(f"–í—Ö–æ–¥–∏–º –≤ –∞–∫–∫–∞—É–Ω—Ç: {phone}")
    return client


async def change_account(_account_number, no_tasks, cycle, count_bad_status_code):
    str_change_account = f"{_account_number}: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç {_account_number+1}. " + Fore.RED + "–ü—Ä–∏—á–∏–Ω–∞:" + Fore.YELLOW
    if no_tasks >= 2:
        print(f"{str_change_account} –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π —É–∂–µ: {no_tasks}")
        return True
    if cycle != max_cycle:
        print(f"{_account_number}: –ü—Ä–æ–π–¥–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {cycle}")
    if cycle == max_cycle:
        print(f"{str_change_account} –ü—Ä–æ–π–¥–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {cycle}")
        return True
    if count_bad_status_code >= max_bad_status_code:
        print(f"{str_change_account} –ë—ã–ª–æ " + Fore.RED + f"{count_bad_status_code}" + Fore.YELLOW + " –ø–ª–æ—Ö–∏—Ö —Å—Ç–∞—Ç—É—Å –∫–æ–¥–æ–≤")
        return True
    return False


def get_now_time():
    return datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S')


async def ending(account_number, max_account_number, count, time_sleep):
    await asyncio.sleep(1)
    account_number += BOT_QUEUE
    if account_number > max_account_number:
        count += 1
        print(Fore.GREEN + f"WHILE –∑–∞–≤–µ—Ä—à–∏–ª—Å—è: {count}\n" + Fore.YELLOW)
        await withdraw(max_account_number)
        print(f"–ù–∞—á–∞–ª–æ: {start_time}\n–°–µ–π—á–∞—Å: {get_now_time()}" + Fore.YELLOW)
        print("\n" + Fore.RED + f"–£ –Ω–∞—Å –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –∫–æ—Ñ–µ {time_sleep} –º–∏–Ω—É—Ç!" + Fore.YELLOW)
        await asyncio.sleep(60 * time_sleep)  # –∂–¥–µ–º 5 –º–∏–Ω—É—Ç (60 * 5)
    return account_number, count


async def run(_account_number, max_account_number, max_cycle, time_sleep):
    count = 0
    account_number = _account_number
    while True:
        count_good_status_code = 0  # –∫–æ–ª-–≤–æ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–æ–∫ = 200
        count_bad_status_code = 0  # –∫–æ–ª-–≤–æ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–æ–≤ != 200
        cycle = 0  # –∫–æ–ª-–≤–æ —Ü–∏–∫–ª–æ–≤
        no_tasks = 0  # –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π —É–∂–µ

        if account_number > max_account_number:
            account_number = 1

        client = await client_authorization(account_number)
        await client.start()
        print(Fore.GREEN + f"### {account_number}: –ö–ª–∏–µ–Ω—Ç –≤–æ—à—ë–ª ###" + Fore.YELLOW)  # –∏–ª–∏ RESET

        dlgs = await client.get_dialogs()
        for dlg in dlgs:
            if dlg.title == BOT_TITLE:
                tegmo = dlg
                # print("TEGMO = ", tegmo)
        await client.send_message(BOT_TITLE, "üñ• Visit sites")
        await asyncio.sleep(30)
        while True:
            await asyncio.sleep(6)
            if await change_account(account_number, no_tasks, cycle, count_bad_status_code):
                await client.disconnect()
                print(Fore.GREEN + f"{account_number}: –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è\n" + Fore.YELLOW)
                break

            msgs = await client.get_messages(tegmo, limit=1)
            for mes in msgs:
                if re.search(r'\bseconds to get your reward\b', mes.message):
                    print(Fore.GREEN + f"{account_number}: –ù–∞–π–¥–µ–Ω–∞ –ù–ê–ì–†–ê–î–ê!" + Fore.YELLOW)
                    str_a = str(mes.message).replace('You must stay on the site for', '')
                    str_a = str_a.replace('seconds to get your reward.', '')
                    waitin = int(str_a)
                    print(f"{account_number}: –ñ–¥–∞—Ç—å –ø—Ä–∏–¥–µ—Ç—Å—è: {waitin} —Å–µ–∫—É–Ω–¥...")
                    await client.send_message(BOT_TITLE, "/visit")
                    await asyncio.sleep(3)
                    msgs2 = await client.get_messages(tegmo, limit=1)
                    for mes2 in msgs2:
                        button_data = mes2.reply_markup.rows[1].buttons[1].data
                        message_id = mes2.id
                        print(f"{account_number}: –ü–µ—Ä–µ—Ö–æ–∂—É –ø–æ —Å—Å—ã–ª–∫–µ")
                        await asyncio.sleep(2)
                        url_rec = messages[0].reply_markup.rows[0].buttons[0].url
                        await asyncio.sleep(6)
                        fp = urllib.request.urlopen(url_rec)
                        mystr = fp.read().decode("utf8")
                        fp.close()
                        if re.search(r'\bSwitch to reCAPTCHA\b', mystr):
                            from telethon.tl.functions.messages import GetBotCallbackAnswerRequest
                            resp = await client(GetBotCallbackAnswerRequest(BOT_TITLE, message_id, data = button_data))
                            await asyncio.sleep(2)
                            print(Fore.RED + f"{account_number}: –ö–ê–ü–ß–ê!" + Fore.YELLOW)

                        else:
                            await asyncio.sleep(waitin + 2)

                elif re.search(r'\bSorry\b', mes.message):
                    no_tasks += 1
                    print(Fore.RED + f"{account_number}: –ù–∞–π–¥–µ–Ω–æ Sorry: {no_tasks}" + Fore.YELLOW)

                else:
                    await asyncio.sleep(4)
                    messages = await client.get_messages(BOT_NAME)
                    url_rec = messages[0].reply_markup.rows[0].buttons[0].url
                    file_urls = open("urls.txt")
                    file_url = file_urls.read()
                    if file_url == url_rec:
                        print(Fore.RED + f"{account_number}: –ù–∞–π–¥–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏!" + Fore.YELLOW)
                        msgs2 = await client.get_messages(tegmo, limit=1)
                        for mes2 in msgs2:
                            button_data = mes2.reply_markup.rows[1].buttons[1].data
                            message_id = mes2.id
                            from telethon.tl.functions.messages import GetBotCallbackAnswerRequest
                            resp = await client(GetBotCallbackAnswerRequest(tegmo, message_id, data = button_data))
                            await asyncio.sleep(2)
                    else:
                        status_code = str(requests.get(url_rec).json)
                        status_code = status_code.replace("<bound method Response.json of <Response [", "")
                        status_code = int(status_code.replace("]>>", ""))
                        if status_code == 200 or status_code == 503:
                            print(Fore.BLUE + f"{account_number}: –°—Ç–∞—Ç—É—Å –∫–æ–¥ = {status_code}" + Fore.YELLOW)
                            file_urls = open("urls.txt", 'w')
                            file_urls.write(url_rec)
                            file_urls.close()
                            print(Fore.GREEN + f"{account_number}: –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª–µ —Å–¥–µ–ª–∞–Ω–∞" + Fore.YELLOW)
                            await asyncio.sleep(15)
                            count_good_status_code += 1
                            print(f"{account_number}: –≠—Ç–æ –∑–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä " + Fore.RED + f"{count_good_status_code}" + Fore.YELLOW)
                            file = open("count_good_status_code.py", "a")
                            file.write(f"\n# –ê–∫–∫–∞—É–Ω—Ç –Ω–æ–º–µ—Ä {account_number}\n")
                            file.write(f"count_good_status_code += {1}")
                            file.close()
                        else:
                            count_bad_status_code += 1
                            print(Fore.RED + f"{account_number}: –°—Ç–∞—Ç—É—Å –∫–æ–¥ = {status_code} | –ö–∞–∂–µ—Ç—Å—è, —Å–µ—Ä–≤–µ—Ä—É –Ω—É–∂–Ω–æ –¥–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤[{count_bad_status_code}]..." + Fore.YELLOW)
                            if count_bad_status_code > 6:
                                break
                        if account_number >= max_account_number:
                            break

        account_number, count = await ending(account_number, max_account_number, count, time_sleep)


async def withdraw(max_account_number):
    general_balance = 0  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    coin = 0  # –°—á–µ—Ç—á–∏–∫ –±–∞–ª–∞–Ω—Å–∞ 
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —É " + Fore.RED + f"{max_account_number}" + Fore.YELLOW + " –±–æ—Ç–æ–≤!")

    for account_number in range(0, max_account_number):
        client = await client_authorization(account_number+1)  # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        await client.start()

        dlgs = await client.get_dialogs()
        for dlg in dlgs:
            if dlg.title == BOT_TITLE:
                tegmo = dlg

        await client.send_message(BOT_TITLE, "/balance")
        await asyncio.sleep(3)
        msgs = await client.get_messages(tegmo, limit=1)
        for mes in msgs:
            convert_coin = str(mes.message).replace('Available balance: ', '')
            coin = float(convert_coin.replace("LTC", ''))  # –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤—ã—Ä–µ–∑–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ
            print(coin)
            general_balance += coin

            if coin >= MINIMAL_BALANCE:
                await client.send_message(BOT_TITLE, "üíµ Withdraw")
                time.sleep(3)
                await client.send_message(BOT_TITLE, LTC_ADDRESS)
                out_coin = float(float(round(coin, 5)) - 0.00001)
                print(Fore.RED + f"–í—ã–≤–æ–¥–∏–º: {out_coin}" + Fore.YELLOW)

                file = open('withdraw.txt', "a")
                file.write(f"–í—Ä–µ–º—è: {get_now_time()}. –í—ã–≤–æ–¥–∏–º {out_coin} LTC —Å –∞–∫–∫–∞—É–Ω—Ç–∞ {Accounts[account_number][1]}\n")
                file.close()

                time.sleep(3)
                await client.send_message(BOT_TITLE, str(out_coin))
                time.sleep(3)
                await client.send_message(BOT_TITLE, "‚úÖ Confirm")
                time.sleep(3)
                await client.send_message(BOT_TITLE, "üè† Menu")
                time.sleep(3)
        await client.disconnect()
        print(Fore.GREEN + "### –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è ###" + Fore.YELLOW)
        time.sleep(1)
    file_balance = open("balance.txt", "a")
    file_balance.write(f"{get_now_time()}: {round(general_balance, 8)}")
    file_balance.close()
    print(Fore.GREEN + f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å = {round(general_balance, 8)} LTC" + Fore.YELLOW)

# –ß–∏—Å—Ç–æ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã, —Ö–æ—á—É —á—Ç–æ–±—ã –≥–ª–∞–∑—É –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ :D
def console_picture():
    print(Style.BRIGHT + Fore.GREEN)
    os.system("clear")
    print("""
       _  ________     _              
  ___ | |/ /_  __/____(_)___ ___  ___ 
 / _ \|   / / / / ___/ / __ `__ \/ _ \\\
 
/  __/   | / / / /  / / / / / / /  __/
\___/_/|_|/_/ /_/  /_/_/ /_/ /_/\___/
    ___   _______  ___   ________
   /   | / ___/\ \/ / | / / ____/
  / /| | \__ \  \  /  |/ / /     
 / ___ |___/ /  / / /|  / /___   
/_/  |_/____/  /_/_/ |_/\____/ 
  ______________    ________________  ___    __  ___
 /_  __/ ____/ /   / ____/ ____/ __ \/   |  /  |/  /
  / / / __/ / /   / __/ / / __/ /_/ / /| | / /|_/ / 
 / / / /___/ /___/ /___/ /_/ / _, _/ ___ |/ /  / /  
/_/ /_____/_____/_____/\____/_/ |_/_/  |_/_/  /_/
    ____  ____  ___________
   / __ )/ __ \/_  __/ ___/
  / __  / / / / / /  \__ \ 
 / /_/ / /_/ / / /  ___/ / 
/_____/\____/ /_/  /____/ 
""")
    print(Fore.YELLOW)
    time.sleep(0.5)

# –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤—ã –¥–ª—è –±–æ—Ç–æ–≤, –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç–æ–≤ –Ω–µ –∑–∞–±–∞–Ω–∏–ª–∏ –∑–∞ —Å–ø–∞–º, –ø—É—Å—Ç—å –ª—É—á—à–µ –æ—Ç—Ö–æ–¥–Ω—É—Ç –∏ –¥–æ–∂–¥—É—Ç—Å—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
def drink_coffee():
    this_time_sleep = int(input("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –º–æ–∂–Ω–æ –ø–∏—Ç—å –∫–æ—Ñ–µ? >> " + Fore.BLUE))
    if this_time_sleep == 0:
        print("–ú—ã –º–æ–∂–µ–º —É–º–µ—Ä–µ—Ç—å –±–µ–∑ –∫–æ—Ñ–µ!!!")
    else:
        print(f"–ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –∫–æ—Ñ–µ = {this_time_sleep} –º–∏–Ω—É—Ç...")
    print(Fore.YELLOW)
    return this_time_sleep

# –ü–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–∂–∏–¥–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∫—É–¥–∞-—Ç–æ –∏–¥—Ç–∏, —Ç–æ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤
def wait():
    time_wait = int(input("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ? >> " + Fore.BLUE))
    if time_wait == 0 or time_wait == None:
        print(Fore.RED + "–ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ä–∞–±–æ—Ç–µ!" + Fore.GREEN)
    else:
        print(f"–ñ–¥–µ–º {time_wait} –º–∏–Ω—É—Ç...")
        time.sleep(time_wait * 60)
        print(Fore.RED + "–ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ä–∞–±–æ—Ç–µ!" + Fore.GREEN)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤—ã –±–æ—Ç–∞–º 
def config(time_sleep):
    file = open("sleep.py", "w")
    file.write(f"time_sleep = {time_sleep}")
    file.close()


# –£–¥–æ–±–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def shell():
    # –í—ã–±–∏—Ä–∞–µ–º —á—Ç–æ –º—ã –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å...
    choose = 0
    try:
        choose = int(input(
            "1) –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–æ–≤...\n" + 
            "2) –£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å...\n" +
            "3) –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é...\n" + 
            "4) –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...\n-->> " + Fore.YELLOW))
    except ValueError:
        print(Fore.RED + "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!" + Fore.YELLOW)
        shell()

    if choose == 1:
        config(drink_coffee())  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª —Ç–æ, —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å –±–æ—Ç–∞–º...
        wait()  # –º–æ–º–µ–Ω—Ç –æ–∂–∏–¥–∞–Ω–∏—è
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç-–æ–±–æ–ª–æ—á–∫—É, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ –≤—Å–µ–≥–¥–∞, —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏ –æ—à–∏–±–∫–∏ –æ–Ω –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å...
        while True:
            print(f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {start_time}")
            process = subprocess.Popen([sys.executable, "runbot.py"])
            process.wait()
    elif choose == 2:
        print(Fore.GREEN + "–£–∑–Ω–∞–µ–º –±–∞–ª–∞–Ω—Å:\n" + Fore.YELLOW)

        asyncio.run(withdraw(max_account_number))  # —Å—á–∏—Ç–∞–µ–º –±–∞–ª–∞–Ω—Å —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        input("–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É..." + Fore.YELLOW)
        os.system("clear")  # –æ—á–∏—â–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª
        shell()  # —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å–∫
    elif choose == 3:
        create_session()
        shell()
    elif choose == 4:
        exit  # –≤—ã—Ö–æ–¥–∏–º
    else:
        print("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...\n")  # –∞–Ω—Ç–∏-–¥—É—Ä–∞–∫
        os.system("clear")
        shell()

# –ó–∞—Å–µ–∫–∞–µ–º –Ω–∞—á–∞–ª–æ —Å—Ç–∞—Ä—Ç–∞...
start_time = get_now_time()

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–º–µ–Ω–Ω–æ main.py
if __name__ == "__main__":
    console_picture()
    shell()
